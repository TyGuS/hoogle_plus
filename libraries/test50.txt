@package base
@version 4.12.0.0
-- base
module Data.Word
data Word
data {-# CTYPE "HsWord8" #-} Word8

-- base
module Data.Int
data {-# CTYPE "HsInt64" #-} Int64

-- base
module Data.String
type String = [Char]

-- base
module Data.Maybe
data Maybe a
Nothing :: Maybe a
Just :: a -> Maybe a
isJust :: Maybe a -> Bool
isNothing :: Maybe a -> Bool
fromMaybe :: a -> Maybe a -> a
listToMaybe :: [a] -> Maybe a
maybeToList :: Maybe a -> [a]
catMaybes :: [Maybe a] -> [a]
-- HOF: maybe :: b -> (a -> b) -> Maybe a -> b
-- HOF: mapMaybe :: (a -> Maybe b) -> [a] -> [b]

-- bytestring
module Data.ByteString.Builder
data Builder
intDec :: Int -> Builder
int64BE :: Int64 -> Builder
byteStringHex :: ByteString -> Builder
toLazyByteString :: Builder -> ByteString

-- bytestring
module Data.ByteString.Lazy
data ByteString
empty :: ByteString
reverse :: ByteString -> ByteString
intersperse :: Word8 -> ByteString -> ByteString
intercalate :: ByteString -> [ByteString] -> ByteString
maximum :: ByteString -> Word8
minimum :: ByteString -> Word8
elem :: Word8 -> ByteString -> Bool
notElem :: Word8 -> ByteString -> Bool
concat :: [ByteString] -> ByteString


-- base
module Data.List
(++) :: [a] -> [a] -> [a]
infixr 5 ++
cycle :: [a] -> [a]
drop :: Int -> [a] -> [a]
head :: [a] -> a
init :: [a] -> [a]
inits :: [a] -> [[a]]
last :: [a] -> a
lines :: String -> [String]
permutations :: [a] -> [[a]]
splitAt :: Int -> [a] -> ([a], [a])
subsequences :: [a] -> [[a]]
tail :: [a] -> [a]
tails :: [a] -> [[a]]
take :: Int -> [a] -> [a]
transpose :: [[a]] -> [[a]]
uncons :: [a] -> Maybe (a, [a])
unlines :: [String] -> String
unwords :: [String] -> String
unzip :: [(a, b)] -> ([a], [b])
unzip3 :: [(a, b, c)] -> ([a], [b], [c])
words :: String -> [String]
zip :: [a] -> [b] -> [(a, b)]

-- base
module Data.Tuple
fst :: (a, b) -> a
snd :: (a, b) -> b
swap :: (a, b) -> (b, a)


-- base
module GHC.List
and :: [Bool] -> Bool
