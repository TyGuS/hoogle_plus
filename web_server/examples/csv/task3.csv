Task 3: firstJustHO :: (a -> Maybe a) -> [a] -> Maybe a	\_ -> Nothing, []	Just, []	Just, [1,2]
\arg0 arg1 -> arg0 (GHC.List.head arg1)	Nothing	Prelude.head: empty list	Just 1
\arg0 arg1 -> arg0 (GHC.List.last arg1)	Nothing	Prelude.last: empty list	Just 2
\arg0 arg1 -> arg0 (GHC.List.head (GHC.List.init arg1))	Nothing	Prelude.init: empty list	Just 1
\arg0 arg1 -> arg0 (GHC.List.last (GHC.List.init arg1))	Nothing	Prelude.init: empty list	Just 1
\arg0 arg1 -> arg0 (GHC.List.head (GHC.List.tail arg1))	Nothing	Prelude.tail: empty list	Just 2
\arg0 arg1 -> arg0 (GHC.List.last (GHC.List.tail arg1))	Nothing	Prelude.tail: empty list	Just 2
\arg0 arg1 -> arg0 (Data.Maybe.fromJust (Data.Maybe.listToMaybe arg1))	Nothing	Maybe.fromJust: Nothing	Just 1
\arg0 arg1 -> Data.Maybe.fromMaybe (arg0 (GHC.List.head arg1)) Data.Maybe.Nothing	Nothing	Prelude.head: empty list	Just 1
\arg0 arg1 -> Data.Maybe.fromMaybe (arg0 (GHC.List.last arg1)) Data.Maybe.Nothing	Nothing	Prelude.last: empty list	Just 2
\arg0 arg1 -> arg0 (Data.Maybe.fromJust (Data.Maybe.Just (GHC.List.head arg1)))	Nothing	Prelude.head: empty list	Just 1