- name: map
  query: (a->b)->[a]->[b]
  solution: map arg1 arg0

- name: repl-funcs
  query: (a->b)->Int->[a->b]
  solution: GHC.List.replicate n f

- name: mapMaybes
  query: (a -> Maybe b) -> [a] -> Maybe b
  solution: Data.Maybe.listToMaybe (Data.Maybe.mapMaybe f xs)

- name: countFilter
  query: (a->Bool)->[a]->Int
  solution: GHC.List.length (GHC.List.takeWhile p xs)

- name: mbAppFirst
  query: b -> (a -> b) -> [a] -> b
  solution: Data.Maybe.maybe x f (Data.Maybe.listToMaybe xs)

- name: 2partApp
  query: (a->b)->(b->c)->[a]->[c]
  solution: GHC.List.map g (GHC.List.map f xs)

- name: zipWithResult
  query: (a->b)->[a]->[(a,b)]
  solution: GHC.List.zip xs (GHC.List.map f [])

- name: resolveEither
  query: Either a b -> (a->b) -> b
  solution: Data.Either.either f GHC.List.id x

- name: applyNtimes
  query: (a->a) -> a -> Int -> a
  solution: GHC.List.foldr Prelude.app x (GHC.List.replicate n f)

- name: eitherTriple
  query: Either a b -> Either a b -> Either a b
  solution: \x y -> either Left (const (either Left Right y)) x

- name: pipe
  query: [(a -> a)] -> (a -> a)
  solution: foldr ($) id xs