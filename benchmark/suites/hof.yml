- name: map
  query: "(a->b)->[a]->[b]"
  solution: map arg1 arg0
  source: "original"

- name: repl-funcs
  query: "(a->b)->Int->[a->b]"
  solution: GHC.List.replicate n f
  source: "original"

- name: mbAppFirst
  query: "b -> (a -> b) -> [a] -> b"
  solution: Data.Maybe.maybe x f (Data.Maybe.listToMaybe xs)
  source: "original"

- name: 2partApp
  query: "(a->b)->(b->c)->[a]->[c]"
  solution: GHC.List.map g (GHC.List.map f xs)
  source: "original"

- name: zipWithResult
  query: "(a->b)->[a]->[(a,b)]"
  solution: GHC.List.zip xs (GHC.List.map f [])
  source: "hoogle"

- name: resolveEither
  query: "Either a b -> (a->b) -> b"
  solution: Data.Either.either f GHC.List.id x
  source: "original"

- name: applyNtimes
  query: "(a->a) -> a -> Int -> a"
  solution: GHC.List.foldr Prelude.app x (GHC.List.replicate n f)
  source: "hoogle"

- name: eitherTriple
  query: "Either a b -> Either a b -> Either a b"
  solution: \x y -> either Left (const (either Left Right y)) x
  source: "hoogle"

- name: pipe
  query: "[(a -> a)] -> (a -> a)"
  solution: foldr ($) id xs
  source: "hoogle"

- name: indexesOf
  query: "([(a,Int)] -> [(a,Int)]) -> [a] -> [Int] -> [Int]"
  solution: map snd (f (zip xs ys))
  source: "stackOverflow"

# - name: dotProduct
#   query: "[Int] -> [Int] -> Int"
#   solution: \x y -> sum (zipWith (*) x y)

# - name: appTuple
#   query: "(a -> a') -> (b -> b') -> (a, b) -> (a', b')"
#   solution: (f (fst t), g (snd t))
