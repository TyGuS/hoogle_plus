- name: appBoth
  query: "(a -> b) -> (a -> c) -> a -> (b, c)"
  solution: "\\f g x -> (f x , g x)"
  source: "original"
  example: 
    - inputs: ["\\x -> x + 1", "\\x -> x * 3", "3"]
      output: (4, 9)
    - inputs: ["\\x -> x ++ x", "Data.List.reverse", "[1,2,3]"]
      output: ([1,2,3,1,2,3], [3,2,1])

#- name: intToBS
#  query: "Int64 -> ByteString"
#  solution: "toLazyByteString . int64Dec"
#  source: "original"

- name: test
  query: "Bool -> a -> Maybe a"
  solution: "\\arg0 arg1 -> Data.Bool.bool Nothing (Just arg1) arg0"
  source: "original"
  example:
    - inputs: ["True", "1"]
      output: Just 1
    - inputs: ["False", "2"]
      output: Nothing

- name: both
  query: "(a -> b) -> (a, a) -> (b, b)"
  solution: "\\arg0 arg1 -> (arg0 (Data.Tuple.fst arg1), arg0 (Data.Tuple.snd arg1))"
  source: "original"
  example:
    - inputs: ["\\x -> x + 1", "(43, 25)"]
      output: (44, 26)
    - inputs: ["\\x -> GHC.List.length x", "([1,2,3,4],[2,3,4])"]
      output: (4, 3)

- name: firstJust
  query: "a -> [Maybe a] -> a"
  solution: "\\x xs -> Data.Maybe.fromMaybe x (Data.Maybe.listToMaybe (Data.Maybe.catMaybes xs))"
  source: "original"
  example:
    - inputs: ["3", "[Nothing, Just 2, Nothing]"]
      output: "2"
    - inputs: ["3", "[]"]
      output: "3"

- name: mapEither
  query: "(a -> Either b c) -> [a] -> ([b], [c])"
  solution: "\\f xs -> Data.Either.partitionEithers (Data.List.map f xs)"
  source: "original"
  example:
    - inputs: ["\\x -> if x < 10 then Left x else Right x", "[0,10,20,30]"]
      output: ([0], [10, 20, 30])
    - inputs: ["\\x -> if x < 10 then Left \"error\" else Right (x * 2)", "[1,3,11,20]"]
      output: (["error", "error"], [22, 40])

- name: mapMaybes
  query: "(a -> Maybe b) -> [a] -> Maybe b"
  solution: "\\f xs -> Data.Maybe.listToMaybe (Data.Maybe.mapMaybe f xs)"
  source: "original"
  example:
    - inputs: ["\\x -> if x < 3 then Nothing else Just (x * x)", "[2,4,6]"]
      output: Just 16

- name: mergeEither
  query: "Either a (Either a b) -> Either a b"
  solution: "\\arg0 -> Data.Either.either Left (Data.Either.either Left Right) arg0"
  source: "original"
  example:
    - inputs: ["Left 2"]
      output: Left 2
    - inputs: ["Right (Left 2)"]
      output: Left 2
    - inputs: ["Right (Right 2.2)"]
      output: Right 2.2

- name: multiApp
  query: "(a -> b -> c) -> (a -> b) -> a -> c"
  solution: "\\f g x -> f x (g x)"
  source: "hoogle"
  example:
    - inputs: ["\\x y -> x + y", "\\x -> x * x", "3"]
      output: "12"
    - inputs: ["\\x y -> GHC.List.length x * GHC.List.length y", "\\x -> x ++ x", "[1,2,3]"]
      output: "18"

- name: singleList
  query: "a -> [a]"
  solution: "\\arg0 -> (:) arg0 []"
  source: "hoogle"
  example:
    - inputs: ["2"]
      output: "[2]"
    - inputs: ["\"abc\""]
      output: "[\"abc\"]"

- name: head-last
  query: "[a] -> (a,a)"
  solution: "\\arg1 -> (Data.List.head arg1, Data.List.last arg1)"
  source: "hoogle"
  example:
    - inputs: ["[1,2,3,4]"]
      output: (1, 4)

- name: head-rest
  query: "[a] -> (a, [a])"
  solution: "\\arg1 -> (Data.List.head arg1, Data.List.tail arg1)"
  source: "hoogle"
  example:
    - inputs: ["[1,2,3,4]"]
      output: (1, [2,3,4])

- name: pred-match
  query: "[a] -> (a -> Bool) -> Int"
  solution: "\\xs f -> Data.List.length (Data.List.filter f xs)"
  source: "hoogle"
  example:
    - inputs: ["[1,2,3,4,5]", "\\x -> x `mod` 2 == 0"]
      output: "2"
    - inputs: ["[[1,2,3], [2,3,4,5], [3,4,5,6,7]]", "\\xs -> 2 `GHC.List.elem` xs"]
      output: "2"

- name: splitStr
  query: "String -> Char -> [String]"
  solution: "\\xs x -> Data.List.words (Data.List.map (\\y -> Data.Bool.bool y ' ' (y == x)) xs)"
  source: "hoogle"
  example: []

- name: splitAtFirst
  query: "a -> [a] -> ([a], [a])"
  solution: "\\x xs -> Data.List.splitAt (Data.Maybe.fromMaybe 0 (Data.List.elemIndex x xs)) xs"
  source: "hoogle"
  example:
    - inputs: ["1", "[2,3,1,4,1,5]"]
      output: ([2,3],[4,1,5])

- name: mbToEither
  query: "Maybe a -> b -> Either a b"
  solution: "\\mb x -> Data.Bool.bool (Right x) (Left (Data.Maybe.fromJust mb)) (Data.Maybe.isJust mb)"
  source: "original"
  example:
    - inputs: [Nothing, "1"]
      output: Right 1
    - inputs: [Just 2, "3"]
      output: Left 2

- name: cartProduct
  query: "[a] -> [b] -> [[(a,b)]]"
  solution: "\\xs ys -> Data.List.map (\\x -> Data.List.map ((,) x) ys) xs"
  source: "original"
  example:
    - inputs: ["[1,2,3]","[2,3,4]"]
      output: "[[(1,2), (1,3), (1,4)], [(2,2), (2,3), (2,4)], [(3,2), (3,3), (3,4)]]"

- name: multiAppPair
  query: "(a -> b, a -> c) -> a -> (b, c)"
  solution: "\\tp x -> (,) ((Data.Tuple.fst tp) x) ((Data.Tuple.snd tp) x)"
  source: "original"
  example:
    - inputs: ["(\\x -> x * 3, \\x -> x * x)", "2"]
      output: (6, 4)

# No useful solution. Head of map ?
- name: hoogle01
  query: "(a -> b) -> [a] -> b"
  solution: "\\f xs -> f (Data.List.head xs)"
  source: "hoogle"
  example:
    - inputs: ["\\xs -> GHC.List.length xs", "[[1,2,3], [1,2,3,4,5,6,7]]"]
      output: "3"
    - inputs: ["\\x -> [x, x]", "[6,5,4]"]
      output: "[6, 6]"

- name: firstMatch
  query: "[a] -> (a -> Bool) -> a"
  solution: "\\xs f -> Data.List.head (Data.List.filter f xs)"
  source: "hoogle"
  example:
    - inputs: ["[1,2,3,4,5]", "\\x -> x `mod` 2 == 0"]
      output: "2"
    - inputs: ["[[1,2,3], [2,3,4,5], [3,4,5,6,7]]", "\\xs -> 2 `GHC.List.elem` xs"]
      output: "[1,2,3]"

- name: firstMaybe
  query: "[Maybe a] -> a"
  solution: "\\arg0 -> Data.List.head (Data.Maybe.catMaybes arg0)"
  source: "hoogle"
  example:
    - inputs: ["[Nothing, Just 1, Just 2]"]
      output: "1"

- name: rights
  query: "[Either a b] -> Either a [b]"
  solution: "\\arg0 -> Right (Data.Either.rights arg0)"
  source: "hoogle"
  example:
    - inputs: ["[Left 1, Right 2, Right 3]"]
      output: "Right [2, 3]"

- name: firstKey
  query: "[(a,b)] -> a"
  solution: "\\arg0 -> Data.Tuple.fst (Data.List.head arg0)"
  source: "hoogle"
  example:
    - inputs: ["[(1, [1,2,3]), (2, [2,3,4]), (4, [4,5,6])]"]
      output: "1"

- name: applyPair
  query: "(a -> b, a) -> b"
  solution: "\\arg0 -> (Data.Tuple.fst arg0) (Data.Tuple.snd arg0)"
  source: "stackOverflow"
  example:
    - inputs: ["(\\x -> x * x, 10)"]
      output: "100"

# No solution?
# - name: cross
#   query: "(a, b) -> (a, b) -> (a, b)"
#   source: "hoogle"

- name: firstRight
  query: "[Either a b] -> Either a b"
  solution: "\\arg0 -> Right (Data.List.head (Data.Either.rights arg0))"
  source: "hoogle"
  example:
    - inputs: ["[Left 1, Left 2, Right 3, Right 4]"]
      output: "Right 3"

- name: maybe
  query: "Maybe a -> a -> Maybe a"
  solution: "\\mb x -> Just (Data.Maybe.fromMaybe x mb)"
  source: "hoogle"
  example:
    - inputs: ["Nothing", "2"]
      output: "Just 2"
    - inputs: ["Just 1", "2"]
      output: "Just 1"

- name: app3
  query: "(a -> b -> c -> d) -> a -> c -> b -> d"
  solution: "\\f x z y -> f x y z"
  source: "hoogle"
  example:
    - inputs: ["\\x y z -> x + y - z", "2", "34", "12"]
      output: "-20"

- name: appendN
  query: "Int -> [a] -> [a]"
  solution: "\\n xs -> Data.List.concat (Data.List.replicate n xs)"
  source: "hoogle"
  example:
    - inputs: ["2", "[1,2,3]"]
      output: "[1,2,3,1,2,3]"

- name: flatten
  query: "[[[a]]] -> [a]"
  solution: "\\xs -> Data.List.concat (Data.List.concat xs)"
  source: "stackOverflow"
  example:
    - inputs: ["[[[1,2,3], [2,3,4]],[[1,2]]]"]
      output: "[1,2,3,2,3,4,1,2]"

- name: takeNdropM
  query: "Int -> Int -> [a] -> ([a], [a])"
  solution: "\\n m l -> (Data.List.take n l, Data.List.drop m l)"
  source: "stackOverflow"
  example:
    - inputs: ["3", "5", "[1,2,3,4,5,6,7]"]
      output: "([1,2,3], [6,7])"

- name: map
  query: "(a->b)->[a]->[b]"
  solution: "\\f xs -> Data.List.map f xs"
  source: "original"
  example:
    - inputs: ["\\x -> x * x", "[1,2,3]"]
      output: "[1,4,9]"

- name: repl-funcs
  query: "(a->b)->Int->[a->b]"
  solution: "\\f n -> Data.List.replicate n f"
  source: "original"
  example: []

- name: mbAppFirst
  query: "b -> (a -> b) -> [a] -> b"
  solution: "\\x f xs -> Data.Maybe.maybe x f (Data.Maybe.listToMaybe xs)"
  source: "original"
  example:
    - inputs: ["2", "\\x -> x * x", "[3,4,5]"]
      output: "9"
    - inputs: ["2", "\\x -> x * x", "[]"]
      output: "2"

- name: 2partApp
  query: "(a->b)->(b->c)->[a]->[c]"
  solution: "\\f g xs -> Data.List.map g (Data.List.map f xs)"
  source: "original"
  example:
    - inputs: ["GHC.List.length", "\\x -> x * x", "[[1,2,3], [1,2,3,4], [1,2,3,4,5]]"]
      output: "[9, 16, 25]"

- name: zipWithResult
  query: "(a->b)->[a]->[(a,b)]"
  solution: "\\f xs -> Data.List.zip xs (Data.List.map f xs)"
  source: "hoogle"
  example:
    - inputs: ["\\x -> x * 3", "[1,2,3]"]
      output: "[(1,3), (2,6), (3,9)]"

- name: resolveEither
  query: "Either a b -> (a->b) -> b"
  solution: "\\x f -> Data.Either.either f id x"
  source: "original"
  example:
    - inputs: ["Left 3", "\\x -> x + 1"]
      output: "4"
    - inputs: ["Right 3", "\\x -> x * x"]
      output: "3"

- name: applyNtimes
  query: "(a->a) -> a -> Int -> a"
  solution: "\\f x n -> Data.List.foldr ($) x (Data.List.replicate n f)"
  source: "hoogle"
  example:
    - inputs: ["\\x -> x ++ x", "\"f-\"", "3"]
      output: "\"f-f-f-f-f-f-f-f-\""

- name: eitherTriple
  query: "Either a b -> Either a b -> Either a b"
  solution: "\\x y -> Data.Either.either Left (const (Data.Either.either Left Right y)) x"
  source: "hoogle"
  example:
    - inputs: ["Left 1", "Left 2"]
      output: "Left 1"
    - inputs: ["Left 1", "Right 2"]
      output: "Left 1"
    - inputs: ["Right 2", "Right 3"]
      output: "Right 3"

- name: pipe
  query: "[(a -> a)] -> (a -> a)"
  solution: "\\xs x -> Data.List.foldr ($) x xs"
  source: "hoogle"
  example:
    - inputs: ["[\\x -> x + 1, \\x -> x * 2, \\x -> x * x]", "3"]
      output: "19"

- name: indexesOf
  query: "([(a,Int)] -> [(a,Int)]) -> [a] -> [Int] -> [Int]"
  solution: "\\f xs ys -> Data.List.map Data.Tuple.snd (f (Data.List.zip xs ys))"
  source: "stackOverflow"
  example:
    - inputs: ["map (\\(x, y) -> (x, y * y))", "[1,2,3]", "[9,8,7]"]
      output: "[81, 64, 49]"

# - name: dotProduct
#   query: "[Int] -> [Int] -> Int"
#   solution: \x y -> sum (zipWith (*) x y)

# - name: appTuple
#   query: "(a -> a') -> (b -> b') -> (a, b) -> (a', b')"
#   solution: (f (fst t), g (snd t))

# - name: numElem
#   query: Eq a => [a] -> a -> Int
#   solution: length (elemIndices x xs)

- name: lookup
  query: "Eq a => [(a,b)] -> a -> b"
  solution: "\\xs k -> Data.Maybe.fromJust (Data.List.lookup k xs)"
  source: "hoogle"
  example:
    - inputs: ["[(1,2), (2,3), (4,6)]", "2"]
      output: "3"

# - name: intersperse
#   query: Show a => a -> [String] -> String
#   solution: intersperse (show arg1) arg0

# - name: convertToInt
#   query: Double -> Int

# - name: toText
#   query: Show a => a -> Text

# - name: toFloat
#   query: Float -> Int

# - name: c2i
#   query: Char -> Integer

# - name: a2i
#   query: Num a => a -> Int

# - name: reverseMap
#   query: Ord k, Ord v => Map k v -> Map v [k]

# - name: overlapCount
#   query: "Eq a => [a] -> [a] -> Int"

- name: mbElem
  query: "Eq a => a -> [a] -> Maybe a"
  solution: "\\x xs -> bool Nothing (Just x) (GHC.List.elem x xs)"
  source: "hoogle"
  example:
    - inputs: ["2", "[1,3,5,7,9]"]
      output: "Nothing"
    - inputs: ["3", "[1,3,5,7,9]"]
      output: "Just 3"

# - name: convert
#   query: Int -> Int -> Float

- name: areEq
  query: "Eq a => a -> a -> Maybe a"
  solution: "\\x y -> bool Nothing (Just x) ((==) x y)"
  source: "hoogle"
  example:
    - inputs: ["1", "2"]
      output: "Nothing"
    - inputs: ["1", "1"]
      output: "Just 1"

# - name: d2i
#   query: Double -> Integer

# - name: keyOverlap
#   query: Ord k => Map k v -> Set k -> Set k
#   solution: Set.intersection arg0 (keySet arg1)

# - name: justMap
#   query: Ord k => [Maybe (k, v)] -> Map k v
#   solution: Map.fromList (catMaybe arg0)

# - name: removeListFromSet
#   query: Ord k => [k] -> Set k -> Set k
#   solution: (\\) arg0 (fromList arg1)

# - name: updateAllInMap
#   query: (v -> Maybe v) -> Map k v -> Map k v

- name: containsEdge
  query: "[Int] -> (Int,Int) -> Bool"
  solution: "\\xs (a,b) -> (a `Data.List.elem` xs) && (b `Data.List.elem` xs)"
  source: "stackOverflow"
  example:
    - inputs: ["[1,2,3,4]", "(1,2)"]
      output: "True"
    - inputs: ["[1,2,3,4]", "(1,5)"]
      output: "False"

- name: dedupe
  query: "Eq a => [a] -> [a]"
  solution: "\\xs -> Data.List.map Data.List.head (Data.List.group xs)"
  source: "original"
  example:
    - inputs: ["\"aaabbbccc\""]
      output: "\"abc\""

- name: inverseMap
  query: "[a -> b] -> a -> [b]"
  solution: "\\fs x -> Data.List.map ($ x) fs"
  source: "original"
  example:
    - inputs: ["[\\x -> x + 3, \\x -> x * x]", "4"]
      output: "[7, 16]"