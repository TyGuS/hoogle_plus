- name: numElem
  query: Eq a => [a] -> a -> Int
  solution: length (elemIndices x xs)

- name: lookup
  query: Eq a => [(a,b)] -> a -> b

- name: intersperse
  query: Show a => a -> [String] -> String
  solution: intersperse (show arg1) arg0

- name: convertToInt
  query: Double -> Int

- name: toText
  query: a -> Text

- name: toFloat
  query: Float -> Int

- name: c2i
  query: Char -> Integer

- name: a2i
  query: Num a => a -> Int

# - name: reverseMap
#   query: Ord k, Ord v => Map k v -> Map v [k]

- name: overlapCount
  query: Eq a => [a] -> [a] -> Int

- name: mbElem
  query: Eq a => a -> [a] -> Maybe a

- name: convert
  query: Int -> Int -> Float

- name: areEq
  query: Eq a => a -> a -> Maybe a

- name: d2i
  query: Double -> Integer

- name: keyOverlap
  query: Ord k => Map k v -> Set k -> Set k
  solution: Set.intersection arg0 (keySet arg1)

# - name: justMap
#   query: Ord k => [Maybe (k, v)] -> Map k v
#   solution: Map.fromList (catMaybe arg0)

- name: removeListFromSet
  query: Ord k => [k] -> Set k -> Set k
  solution: (\\) arg0 (fromList arg1)

# - name: updateAllInMap
#   query: (v -> Maybe v) -> Map k v -> Map k v

- name: intToBS
  query: "Int64 -> ByteString"

- name: test
  query: "Bool -> a -> Maybe a"

- name: both
  query: "(a -> b) -> (a, a) -> (b, b)"

- name: fromFirstMaybes
  query: "a -> [Maybe a] -> a"

- name: groupList
  query: "[(k, v)] -> Map k [v]"

- name: mapEither
  query: "(a -> Either b c) -> [a] -> ([b], [c])"

- name: firstJust
  query: "(a -> Maybe b) -> [a] -> Maybe b"

- name: mergeEither
  query: "Either a (Either a b) -> Either a b"

- name: multiApp
  query: "(a -> b -> c) -> (a -> b) -> a -> c"

- name: singleList
  query: "Int -> [Int]"

- name: head-tail
  query: "[a] -> (a,a)"

- name: head-rest
  query: "[a] -> (a, [a])"

- name: pred-match
  query: "[a] -> (a -> Bool) -> Int"

- name: splitStr
  query: "String -> Char -> [String]"

- name: splitAtFirst
  query: "a -> [a] -> ([a], [a])"

- name: mbToEither
  query: "Maybe a -> b -> Either a b"

- name: cartProduct
  query: "[a] -> [b] -> [[(a,b)]]"

- name: multiAppPair
  query: "(a -> b, a -> c) -> a -> (b, c)"

# No useful solution. Head of map ?
- name: hoogle01
  query: "(a -> b) -> [a] -> b"

- name: hoogle02
  query: "b -> (a -> b) -> [a] -> b"

- name: firstMatch
  query: "[a] -> (a -> Bool) -> a"

- name: firstMaybe
  query: "[Maybe a] -> a"

- name: rights
  query: "[Either a b] -> Either a [b]"

- name: firstKey
  query: "[(a,b)] -> a"

- name: applyPair
  query: "(a -> b, a) -> b"

# No solution?
- name: cross
  query: "(a, b) -> (a, b) -> (a, b)"

- name: firstRight
  query: "[Either a b] -> Either a b"

- name: appPair
  query: "(a, a) -> (a -> b) -> (b, b)"

- name: maybe
  query: "Maybe a -> a -> Maybe a"

- name: app3
  query: "(a -> b -> c -> d) -> a -> c -> b -> d"

- name: appendN
  query: "Int -> [a] -> [a]"
  solution: concat (replicate n xs)