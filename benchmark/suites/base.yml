- name: intToBS
  query: "Int64 -> ByteString"
  solution: fromBuilder (Int64 arg0)
  source: "original"

- name: test
  query: "Bool -> a -> Maybe a"
  solution: bool Nothing (Just arg0) arg1
  source: "original"

- name: both
  query: "(a -> b) -> (a, a) -> (b, b)"
  solution: (,) (arg1 (fst arg0)) (arg1 (snd arg0))
  source: "original"

- name: fromFirstMaybes
  query: "a -> [Maybe a] -> a"
  solution: fromMaybe x (listToMaybe (catMaybes xs))
  source: "original"

# - name: groupList
#   query: "[(k, v)] -> Map k [v]"

- name: mapEither
  query: "(a -> Either b c) -> [a] -> ([b], [c])"
  solution: foldr (\x (ys, zs) -> either (\y -> (y:ys,zs)) (\z -> (ys, z:zs)) (f x)) ([],[]) xs
  source: "original"

- name: mapMaybes
  query: "(a -> Maybe b) -> [a] -> Maybe b"
  solution: Data.Maybe.listToMaybe (Data.Maybe.mapMaybe f xs)
  source: "original"

- name: mergeEither
  query: "Either a (Either a b) -> Either a b"
  solution: either Left (Either Left Right) arg0
  source: "original"

- name: multiApp
  query: "(a -> b -> c) -> (a -> b) -> a -> c"
  solution: arg2 (arg0) (arg1 arg0)
  source: "hoogle"

- name: singleList
  query: "Int -> [Int]"
  solution: (:) arg0 []
  source: "hoogle"

- name: head-tail
  query: "[a] -> (a,a)"
  solution: (head arg1, last arg1)
  source: "hoogle"

- name: head-rest
  query: "[a] -> (a, [a])"
  solution: (head arg1, tail arg1)
  source: "hoogle"

- name: pred-match
  query: "[a] -> (a -> Bool) -> Int"
  solution: length (filter arg2 arg1)
  source: "hoogle"

- name: splitStr
  query: "String -> Char -> [String]"
  solution: map show (splitOn (pack xs) (singleton x))
  source: "hoogle"

- name: splitAtFirst
  query: "a -> [a] -> ([a], [a])"
  source: "hoogle"

- name: mbToEither
  query: "Maybe a -> b -> Either a b"
  solution: bool (Right arg0) (Left (fromJust arg1)) (isJust arg1)
  source: "original"

- name: cartProduct
  query: "[a] -> [b] -> [[(a,b)]]"
  source: "original"

- name: multiAppPair
  query: "(a -> b, a -> c) -> a -> (b, c)"
  solution: (,) ((fst arg1) arg0) ((snd arg1) arg0)
  source: "original"

# No useful solution. Head of map ?
- name: hoogle01
  query: "(a -> b) -> [a] -> b"
  solution: arg1 (head arg0)
  source: "hoogle"

- name: firstMatch
  query: "[a] -> (a -> Bool) -> a"
  solution: head (filter arg0 arg1)
  source: "hoogle"

- name: firstMaybe
  query: "[Maybe a] -> a"
  solution: head (catMaybes arg0)
  source: "hoogle"

- name: rights
  query: "[Either a b] -> Either a [b]"
  solution: Right (rights arg0)
  source: "hoogle"

- name: firstKey
  query: "[(a,b)] -> a"
  solution: fst (head arg0)
  source: "hoogle"

- name: applyPair
  query: "(a -> b, a) -> b"
  solution: (fst arg0) (snd arg0)
  source: "stackOverflow"

# No solution?
- name: cross
  query: "(a, b) -> (a, b) -> (a, b)"
  source: "hoogle"

- name: firstRight
  query: "[Either a b] -> Either a b"
  solution: Right (head (rights arg0))
  source: "hoogle"

- name: maybe
  query: "Maybe a -> a -> Maybe a"
  solution: Just (maybe arg0 arg1)
  source: "hoogle"

- name: app3
  query: "(a -> b -> c -> d) -> a -> c -> b -> d"
  solution: arg3 arg2 arg0 arg1
  source: "hoogle"

- name: appendN
  query: "Int -> [a] -> [a]"
  solution: concat (replicate n xs)
  source: "hoogle"

- name: flatten
  query: "[[[a]]] -> [a]"
  solution: concat (concat xs)
  source: "stackOverflow"

- name: takeNdropM
  query: "Int -> Int -> [a] -> ([a], [a])"
  solution: "(take n l, drop m l)"
  source: "stackOverflow"

- name: appBoth
  query: "(a -> b) -> (a -> c) -> a -> (b, c)"
  solution: "(f x, g x)"
  source: "original"